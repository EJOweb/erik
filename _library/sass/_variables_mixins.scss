//--------------------------------------------------------------
// Variables
//--------------------------------------------------------------

/* ======= Widths & Breakpoints ======= */

/* Widths (container sizes) */
$smallphone_bp: 350px;
$smallphone_width: 290px;

$largephone_bp: 480px;
$largephone_width: 420px;

$tablet_bp: 680px;
$tablet_width: 640px;

$desktop_bp: 980px;
$desktop_width: 920px;

$min-width: $smallphone_width;
$max-width: $desktop_width;

/* Breakpoints */


/* ====== COLORS ====== */
/* Main */
$color-primary: #107d45;
$color-secondary: #003d7d;
$color-ui: #f4f2f1;

/* Text */
$color-font: #000;
$color-font-alt: #000;
$color-link: #0060c4;
$color-link-hover: #551A8B;
$color-heading: $color-secondary;

/* Other */
$color-background: #fff;
$color-menu: $color-primary;
$color-forms: #333;

/* ======= FONT ======= */
$font-family: arial, sans-serif;

$font-size: 16px;
$line-height: 1.5;

$font-size-small: shrinkfsize($font-size);
$line-height-small: lh($font-size-small);


//--------------------------------------------------------------
// Mixins
//--------------------------------------------------------------

// Usage: @include bp(small);
// Mobile First
@mixin bp($breakpoint) {
	@if $breakpoint == barebones {
		@media only screen and (max-width: $largephone_bp) { @content; }
	}
	@else if $breakpoint == largephone {
		@media only screen and (min-width: $largephone_bp) { @content; }
	}
	@else if $breakpoint == tablet {
		@media only screen and (min-width: $tablet_bp) { @content; }
	}
	@else if $breakpoint == desktop {
		@media only screen and (min-width: $desktop_bp) { @content; }
	}
	@else {
		@media only screen and (min-width: $breakpoint) { @content; }
	}
}

// Same as above breakpoint mixin, but other naming
@mixin barebones { @media only screen and (max-width: $largephone_bp - 1px) { @content; } }
@mixin smallphone { @media only screen and (min-width: $smallphone_bp) { @content; } }
@mixin largephone { @media only screen and (min-width: $largephone_bp) { @content; } }
@mixin largephone-only { @media only screen and (min-width: $largephone_bp) and (max-width: $tablet_bp - 1px) { @content; } }
@mixin tablet { @media only screen and (min-width: $tablet_bp) { @content; } }
@mixin tablet-only { @media only screen and (min-width: $tablet_bp) and (max-width: $desktop_bp - 1px) { @content; } }
@mixin desktop { @media only screen and (min-width: $desktop_bp) { @content; } }
@mixin mobile { @media only screen and (max-width: $desktop_bp - 1px) { @content; } }

// Shorthand mixin to calculate fontsizes and line-heights for smaller screens
@mixin fontsize($fontSize: $font-size, $lineHeight: false) {

	$fontSizeSmall: shrinkfsize($fontSize);

	font-size: pxrem($fontSizeSmall);
	line-height: lh($fontSizeSmall, $lineHeight);

	@include tablet {
		font-size: pxrem($fontSize);
		line-height: lh($fontSize, $lineHeight);
	}
}

// Transition
// Usage: @include transition(all, 0.2s, ease-in-out);
// 2nd Usage: @include transition(none);
@mixin transition($transition-property: all, $transition-time: 0.2, $method: ease-in-out) {

	@if $transition-property == none {
		-webkit-transition: none;
		-moz-transition: none;
		-ms-transition: none;
		-o-transition: none;
		transition: none;
	}
	@else {
		-webkit-transition: $transition-property $transition-time $method;
		-moz-transition: $transition-property $transition-time $method;
		-ms-transition: $transition-property $transition-time $method;
		-o-transition: $transition-property $transition-time $method;
		transition: $transition-property $transition-time $method;
	}
}

// Box-Shadow
// Usage: @include box-shadow(0px, 0px, 0px, 0px, rgba(0,0,0,1));
@mixin box-shadow($left, $top, $blur, $spread, $color, $inset: false) {
	@if $inset {
		-webkit-box-shadow:inset $left $top $blur $spread $color;
		-moz-box-shadow:inset $left $top $blur $spread $color;
		box-shadow:inset $left $top $blur $spread $color;
	} @else {
		-webkit-box-shadow: $left $top $blur $spread $color;
		-moz-box-shadow: $left $top $blur $spread $color;
		box-shadow: $left $top $blur $spread $color;
	}
}

// FontAwesome
@mixin icon($icon) {
	display: inline-block;
	font: normal normal normal 14px/1 FontAwesome; // shortening font declaration
	font-size: inherit; // can't have font-size inherit on line above, so need to override
	text-rendering: auto; // optimizelegibility throws things off #1094
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;

	content: $icon;
}

@mixin icon-before($icon, $padding: 0) {
	&:before {
		@include icon($icon);
		padding-right: $padding;
	}
}